<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
	PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
	"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<!--
	mybatis逆向工程运行成功却没有生成相应的包和文件 ,
	mac下路径是./src
	windows 路径是.\src

	而且windows下有时候还是无法生成，那么就使用绝对路径而不使用相对路径，但是在一些单独的项目中却又没有这样的问题，
	在一些单独项目中使用相对路径也是能够成功，这真是蛋疼！
	如果使用插件mbGenerator,那么自定义的注释类是会报错的。

	最后寻找到一篇解决方案的文档：
	https://blog.csdn.net/fjscqjj1/article/details/79924555
	也就是修改主执行文件的Working Directory 的位置为$MODULE_WORKING_DIR$ ，原来的是绝对的位置，父级目录。
	这样的话comment的自定义的也能使用了！

	-->
	<!-- 引入配置文件 -->
	<!--<properties resource="init.properties"/>-->


	<!--无Example等内容，简单版
	<context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">	-->

	<!-- 有Example查询条件内容,拓展版-->
	<context id="testTables" targetRuntime="MyBatis3">
		<!--
		在某个项目中遇到这么一个问题，因为原始表结构中某些字段定义使用了MySQL的关键字如match等，在使用Mybatis Generator生成代码时造成了运行异常。查找了半天解决方案，最后在官网上看到其实它已经提供了原生解决方案。
		在context节点的property定义中存在如下属性：
		在context节点中增加如下属性为关键字添加属性：
				为sql关键字添加分隔符
		<property name="autoDelimitKeywords" value="true"/>
		-->
		<!--分割SQL关键字 默认为false-->
		<property name="autoDelimitKeywords" value="true" />
		<!--分割关键字的前符号-->
		<property name="beginningDelimiter" value="`" />
		<!--分割关键字的后符号-->
		<property name="endingDelimiter" value="`" />

		<!--
    <context id="mysqlgenerator" targetRuntime="MyBatis3">
      <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin" />
    </context>-->
		<!-- ########################################## -->
		<!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 -->
		<property name="javaFileEncoding" value="UTF-8"/>
		
		<!--<commentGenerator>-->
			<!--&lt;!&ndash; 是否去除自动生成的注释 true：是 ： false:否 &ndash;&gt;-->
			<!--<property name="suppressAllComments" value="false" />-->
			<!--<property name="suppressDate" value="true"/>-->
			<!--<property name="addRemarkComments" value="true"/>-->
		<!--</commentGenerator>-->

		<!-- 这里的type里写的是你的实现类的类全路径 -->
		<commentGenerator type="com.kejso.user.generator.comment.MyCommentGenerator"></commentGenerator>

		<!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
		<jdbcConnection
			driverClass="com.mysql.jdbc.Driver"
			connectionURL="jdbc:mysql://10.2.16.3:3306/2005DKA10100_log?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC&amp;useSSL=false"
			userId="root"
			password="Tiger!2018">
		</jdbcConnection>

		<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
			NUMERIC 类型解析为java.math.BigDecimal -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- targetProject:生成Entity类的路径 -->
		<javaModelGenerator targetProject="./src/main/java" targetPackage="cn.org.escience.log.api.model">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
			<!-- 从数据库返回的值被清理前后的空格 -->
			<property name="trimStrings" value="true" />
		</javaModelGenerator>

		<!-- targetProject:XXXMapper.xml映射文件生成的路径 -->
		<sqlMapGenerator targetProject=".\src\main\java"
			targetPackage="cn.org.escience.log.api.mapper">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>

		<!-- targetPackage：Mapper接口生成的位置 -->
		<javaClientGenerator type="XMLMAPPER" targetProject=".\src\main\java"
			targetPackage="cn.org.escience.log.api.mapper">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>

		<!-- 数据库表名字和我们的entity类对应的映射指定 -->
		<!-- <table tableName="review_info" 	domainObjectName="ReviewInfo"></table>  -->
		<!-- <table tableName="topic" 	domainObjectName="Topic"></table>  -->
		<!-- <table tableName="task_list" 	domainObjectName="TaskList"></table> -->
		<!--<table tableName="topic" 	domainObjectName="Topic"-->
			<!--enableCountByExample="true"-->
			<!--enableDeleteByExample="true"-->
			<!--enableSelectByExample="true"-->
			<!--enableUpdateByExample="true">-->
			
		<!--</table>-->
		<!-- 配置表信息 -->
		<!--<table schema="${jdbc_user}" tableName="visitors"-->
			<!--domainObjectName="Visitors"-->
			<!--enableCountByExample="true"-->
			<!--enableDeleteByExample="true"-->
			<!--enableSelectByExample="true"-->
			<!--selectByExampleQueryId="true"-->
			<!--enableUpdateByExample="true">-->
			<!--&lt;!&ndash; schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample-->
            <!--是否生成 example类   &ndash;&gt;-->
			<!--<generatedKey column="id" sqlStatement="mysql" identity="true" />-->
			<!--&lt;!&ndash; 忽略列，不生成bean 字段 &ndash;&gt;-->
			<!--&lt;!&ndash; <ignoreColumn column="FRED" />  &ndash;&gt;-->
			<!--&lt;!&ndash; 指定列的java数据类型 &ndash;&gt;-->
			<!--&lt;!&ndash;<columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" />  &ndash;&gt;-->
		<!--</table>-->

		<!-- 有些表的字段需要指定java类型
		 <table schema="" tableName="">
			<columnOverride column="" javaType="" />
		</table> -->

		<!-- sql占位符，表示所有的表 -->
		<table tableName="%"

		>
			<!--<generatedKey column="id" sqlStatement="Mysql" identity="true" />-->
		</table>
	</context>
</generatorConfiguration>
