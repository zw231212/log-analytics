<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.org.escience.log.api.mapper.GeneralMapper">
  <resultMap id="BaseResultMap" type="cn.org.escience.log.api.model.General">
    <id column="year_month" jdbcType="VARCHAR" property="yearMonth" />
    <result column="visits" jdbcType="INTEGER" property="visits" />
    <result column="visits_unique" jdbcType="INTEGER" property="visitsUnique" />
    <result column="pages" jdbcType="INTEGER" property="pages" />
    <result column="hits" jdbcType="INTEGER" property="hits" />
    <result column="bandwidth" jdbcType="BIGINT" property="bandwidth" />
    <result column="pages_nv" jdbcType="INTEGER" property="pagesNv" />
    <result column="hits_nv" jdbcType="INTEGER" property="hitsNv" />
    <result column="bandwidth_nv" jdbcType="BIGINT" property="bandwidthNv" />
    <result column="hosts_known" jdbcType="INTEGER" property="hostsKnown" />
    <result column="hosts_unknown" jdbcType="INTEGER" property="hostsUnknown" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `year_month`, visits, visits_unique, pages, hits, bandwidth, pages_nv, hits_nv, bandwidth_nv, 
    hosts_known, hosts_unknown
  </sql>
  <select id="selectByExample" parameterType="cn.org.escience.log.api.model.GeneralExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from general
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from general
    where `year_month` = #{yearMonth,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from general
    where `year_month` = #{yearMonth,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.org.escience.log.api.model.GeneralExample">
    delete from general
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.org.escience.log.api.model.General">
    insert into general (`year_month`, visits, visits_unique, 
      pages, hits, bandwidth, 
      pages_nv, hits_nv, bandwidth_nv, 
      hosts_known, hosts_unknown)
    values (#{yearMonth,jdbcType=VARCHAR}, #{visits,jdbcType=INTEGER}, #{visitsUnique,jdbcType=INTEGER}, 
      #{pages,jdbcType=INTEGER}, #{hits,jdbcType=INTEGER}, #{bandwidth,jdbcType=BIGINT}, 
      #{pagesNv,jdbcType=INTEGER}, #{hitsNv,jdbcType=INTEGER}, #{bandwidthNv,jdbcType=BIGINT}, 
      #{hostsKnown,jdbcType=INTEGER}, #{hostsUnknown,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.org.escience.log.api.model.General">
    insert into general
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="yearMonth != null">
        `year_month`,
      </if>
      <if test="visits != null">
        visits,
      </if>
      <if test="visitsUnique != null">
        visits_unique,
      </if>
      <if test="pages != null">
        pages,
      </if>
      <if test="hits != null">
        hits,
      </if>
      <if test="bandwidth != null">
        bandwidth,
      </if>
      <if test="pagesNv != null">
        pages_nv,
      </if>
      <if test="hitsNv != null">
        hits_nv,
      </if>
      <if test="bandwidthNv != null">
        bandwidth_nv,
      </if>
      <if test="hostsKnown != null">
        hosts_known,
      </if>
      <if test="hostsUnknown != null">
        hosts_unknown,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="yearMonth != null">
        #{yearMonth,jdbcType=VARCHAR},
      </if>
      <if test="visits != null">
        #{visits,jdbcType=INTEGER},
      </if>
      <if test="visitsUnique != null">
        #{visitsUnique,jdbcType=INTEGER},
      </if>
      <if test="pages != null">
        #{pages,jdbcType=INTEGER},
      </if>
      <if test="hits != null">
        #{hits,jdbcType=INTEGER},
      </if>
      <if test="bandwidth != null">
        #{bandwidth,jdbcType=BIGINT},
      </if>
      <if test="pagesNv != null">
        #{pagesNv,jdbcType=INTEGER},
      </if>
      <if test="hitsNv != null">
        #{hitsNv,jdbcType=INTEGER},
      </if>
      <if test="bandwidthNv != null">
        #{bandwidthNv,jdbcType=BIGINT},
      </if>
      <if test="hostsKnown != null">
        #{hostsKnown,jdbcType=INTEGER},
      </if>
      <if test="hostsUnknown != null">
        #{hostsUnknown,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.org.escience.log.api.model.GeneralExample" resultType="java.lang.Long">
    select count(*) from general
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update general
    <set>
      <if test="record.yearMonth != null">
        `year_month` = #{record.yearMonth,jdbcType=VARCHAR},
      </if>
      <if test="record.visits != null">
        visits = #{record.visits,jdbcType=INTEGER},
      </if>
      <if test="record.visitsUnique != null">
        visits_unique = #{record.visitsUnique,jdbcType=INTEGER},
      </if>
      <if test="record.pages != null">
        pages = #{record.pages,jdbcType=INTEGER},
      </if>
      <if test="record.hits != null">
        hits = #{record.hits,jdbcType=INTEGER},
      </if>
      <if test="record.bandwidth != null">
        bandwidth = #{record.bandwidth,jdbcType=BIGINT},
      </if>
      <if test="record.pagesNv != null">
        pages_nv = #{record.pagesNv,jdbcType=INTEGER},
      </if>
      <if test="record.hitsNv != null">
        hits_nv = #{record.hitsNv,jdbcType=INTEGER},
      </if>
      <if test="record.bandwidthNv != null">
        bandwidth_nv = #{record.bandwidthNv,jdbcType=BIGINT},
      </if>
      <if test="record.hostsKnown != null">
        hosts_known = #{record.hostsKnown,jdbcType=INTEGER},
      </if>
      <if test="record.hostsUnknown != null">
        hosts_unknown = #{record.hostsUnknown,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update general
    set `year_month` = #{record.yearMonth,jdbcType=VARCHAR},
      visits = #{record.visits,jdbcType=INTEGER},
      visits_unique = #{record.visitsUnique,jdbcType=INTEGER},
      pages = #{record.pages,jdbcType=INTEGER},
      hits = #{record.hits,jdbcType=INTEGER},
      bandwidth = #{record.bandwidth,jdbcType=BIGINT},
      pages_nv = #{record.pagesNv,jdbcType=INTEGER},
      hits_nv = #{record.hitsNv,jdbcType=INTEGER},
      bandwidth_nv = #{record.bandwidthNv,jdbcType=BIGINT},
      hosts_known = #{record.hostsKnown,jdbcType=INTEGER},
      hosts_unknown = #{record.hostsUnknown,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.org.escience.log.api.model.General">
    update general
    <set>
      <if test="visits != null">
        visits = #{visits,jdbcType=INTEGER},
      </if>
      <if test="visitsUnique != null">
        visits_unique = #{visitsUnique,jdbcType=INTEGER},
      </if>
      <if test="pages != null">
        pages = #{pages,jdbcType=INTEGER},
      </if>
      <if test="hits != null">
        hits = #{hits,jdbcType=INTEGER},
      </if>
      <if test="bandwidth != null">
        bandwidth = #{bandwidth,jdbcType=BIGINT},
      </if>
      <if test="pagesNv != null">
        pages_nv = #{pagesNv,jdbcType=INTEGER},
      </if>
      <if test="hitsNv != null">
        hits_nv = #{hitsNv,jdbcType=INTEGER},
      </if>
      <if test="bandwidthNv != null">
        bandwidth_nv = #{bandwidthNv,jdbcType=BIGINT},
      </if>
      <if test="hostsKnown != null">
        hosts_known = #{hostsKnown,jdbcType=INTEGER},
      </if>
      <if test="hostsUnknown != null">
        hosts_unknown = #{hostsUnknown,jdbcType=INTEGER},
      </if>
    </set>
    where `year_month` = #{yearMonth,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.org.escience.log.api.model.General">
    update general
    set visits = #{visits,jdbcType=INTEGER},
      visits_unique = #{visitsUnique,jdbcType=INTEGER},
      pages = #{pages,jdbcType=INTEGER},
      hits = #{hits,jdbcType=INTEGER},
      bandwidth = #{bandwidth,jdbcType=BIGINT},
      pages_nv = #{pagesNv,jdbcType=INTEGER},
      hits_nv = #{hitsNv,jdbcType=INTEGER},
      bandwidth_nv = #{bandwidthNv,jdbcType=BIGINT},
      hosts_known = #{hostsKnown,jdbcType=INTEGER},
      hosts_unknown = #{hostsUnknown,jdbcType=INTEGER}
    where `year_month` = #{yearMonth,jdbcType=VARCHAR}
  </update>
  <resultMap id="BaseResultMap" type="cn.org.escience.log.api.model.General">
    <id column="year_month" jdbcType="VARCHAR" property="yearMonth" />
    <result column="visits" jdbcType="INTEGER" property="visits" />
    <result column="visits_unique" jdbcType="INTEGER" property="visitsUnique" />
    <result column="pages" jdbcType="INTEGER" property="pages" />
    <result column="hits" jdbcType="INTEGER" property="hits" />
    <result column="bandwidth" jdbcType="BIGINT" property="bandwidth" />
    <result column="pages_nv" jdbcType="INTEGER" property="pagesNv" />
    <result column="hits_nv" jdbcType="INTEGER" property="hitsNv" />
    <result column="bandwidth_nv" jdbcType="BIGINT" property="bandwidthNv" />
    <result column="hosts_known" jdbcType="INTEGER" property="hostsKnown" />
    <result column="hosts_unknown" jdbcType="INTEGER" property="hostsUnknown" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `year_month`, visits, visits_unique, pages, hits, bandwidth, pages_nv, hits_nv, bandwidth_nv, 
    hosts_known, hosts_unknown
  </sql>
  <select id="selectByExample" parameterType="cn.org.escience.log.api.model.GeneralExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from general
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from general
    where `year_month` = #{yearMonth,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from general
    where `year_month` = #{yearMonth,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.org.escience.log.api.model.GeneralExample">
    delete from general
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.org.escience.log.api.model.General">
    insert into general (`year_month`, visits, visits_unique, 
      pages, hits, bandwidth, 
      pages_nv, hits_nv, bandwidth_nv, 
      hosts_known, hosts_unknown)
    values (#{yearMonth,jdbcType=VARCHAR}, #{visits,jdbcType=INTEGER}, #{visitsUnique,jdbcType=INTEGER}, 
      #{pages,jdbcType=INTEGER}, #{hits,jdbcType=INTEGER}, #{bandwidth,jdbcType=BIGINT}, 
      #{pagesNv,jdbcType=INTEGER}, #{hitsNv,jdbcType=INTEGER}, #{bandwidthNv,jdbcType=BIGINT}, 
      #{hostsKnown,jdbcType=INTEGER}, #{hostsUnknown,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.org.escience.log.api.model.General">
    insert into general
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="yearMonth != null">
        `year_month`,
      </if>
      <if test="visits != null">
        visits,
      </if>
      <if test="visitsUnique != null">
        visits_unique,
      </if>
      <if test="pages != null">
        pages,
      </if>
      <if test="hits != null">
        hits,
      </if>
      <if test="bandwidth != null">
        bandwidth,
      </if>
      <if test="pagesNv != null">
        pages_nv,
      </if>
      <if test="hitsNv != null">
        hits_nv,
      </if>
      <if test="bandwidthNv != null">
        bandwidth_nv,
      </if>
      <if test="hostsKnown != null">
        hosts_known,
      </if>
      <if test="hostsUnknown != null">
        hosts_unknown,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="yearMonth != null">
        #{yearMonth,jdbcType=VARCHAR},
      </if>
      <if test="visits != null">
        #{visits,jdbcType=INTEGER},
      </if>
      <if test="visitsUnique != null">
        #{visitsUnique,jdbcType=INTEGER},
      </if>
      <if test="pages != null">
        #{pages,jdbcType=INTEGER},
      </if>
      <if test="hits != null">
        #{hits,jdbcType=INTEGER},
      </if>
      <if test="bandwidth != null">
        #{bandwidth,jdbcType=BIGINT},
      </if>
      <if test="pagesNv != null">
        #{pagesNv,jdbcType=INTEGER},
      </if>
      <if test="hitsNv != null">
        #{hitsNv,jdbcType=INTEGER},
      </if>
      <if test="bandwidthNv != null">
        #{bandwidthNv,jdbcType=BIGINT},
      </if>
      <if test="hostsKnown != null">
        #{hostsKnown,jdbcType=INTEGER},
      </if>
      <if test="hostsUnknown != null">
        #{hostsUnknown,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.org.escience.log.api.model.GeneralExample" resultType="java.lang.Long">
    select count(*) from general
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update general
    <set>
      <if test="record.yearMonth != null">
        `year_month` = #{record.yearMonth,jdbcType=VARCHAR},
      </if>
      <if test="record.visits != null">
        visits = #{record.visits,jdbcType=INTEGER},
      </if>
      <if test="record.visitsUnique != null">
        visits_unique = #{record.visitsUnique,jdbcType=INTEGER},
      </if>
      <if test="record.pages != null">
        pages = #{record.pages,jdbcType=INTEGER},
      </if>
      <if test="record.hits != null">
        hits = #{record.hits,jdbcType=INTEGER},
      </if>
      <if test="record.bandwidth != null">
        bandwidth = #{record.bandwidth,jdbcType=BIGINT},
      </if>
      <if test="record.pagesNv != null">
        pages_nv = #{record.pagesNv,jdbcType=INTEGER},
      </if>
      <if test="record.hitsNv != null">
        hits_nv = #{record.hitsNv,jdbcType=INTEGER},
      </if>
      <if test="record.bandwidthNv != null">
        bandwidth_nv = #{record.bandwidthNv,jdbcType=BIGINT},
      </if>
      <if test="record.hostsKnown != null">
        hosts_known = #{record.hostsKnown,jdbcType=INTEGER},
      </if>
      <if test="record.hostsUnknown != null">
        hosts_unknown = #{record.hostsUnknown,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update general
    set `year_month` = #{record.yearMonth,jdbcType=VARCHAR},
      visits = #{record.visits,jdbcType=INTEGER},
      visits_unique = #{record.visitsUnique,jdbcType=INTEGER},
      pages = #{record.pages,jdbcType=INTEGER},
      hits = #{record.hits,jdbcType=INTEGER},
      bandwidth = #{record.bandwidth,jdbcType=BIGINT},
      pages_nv = #{record.pagesNv,jdbcType=INTEGER},
      hits_nv = #{record.hitsNv,jdbcType=INTEGER},
      bandwidth_nv = #{record.bandwidthNv,jdbcType=BIGINT},
      hosts_known = #{record.hostsKnown,jdbcType=INTEGER},
      hosts_unknown = #{record.hostsUnknown,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.org.escience.log.api.model.General">
    update general
    <set>
      <if test="visits != null">
        visits = #{visits,jdbcType=INTEGER},
      </if>
      <if test="visitsUnique != null">
        visits_unique = #{visitsUnique,jdbcType=INTEGER},
      </if>
      <if test="pages != null">
        pages = #{pages,jdbcType=INTEGER},
      </if>
      <if test="hits != null">
        hits = #{hits,jdbcType=INTEGER},
      </if>
      <if test="bandwidth != null">
        bandwidth = #{bandwidth,jdbcType=BIGINT},
      </if>
      <if test="pagesNv != null">
        pages_nv = #{pagesNv,jdbcType=INTEGER},
      </if>
      <if test="hitsNv != null">
        hits_nv = #{hitsNv,jdbcType=INTEGER},
      </if>
      <if test="bandwidthNv != null">
        bandwidth_nv = #{bandwidthNv,jdbcType=BIGINT},
      </if>
      <if test="hostsKnown != null">
        hosts_known = #{hostsKnown,jdbcType=INTEGER},
      </if>
      <if test="hostsUnknown != null">
        hosts_unknown = #{hostsUnknown,jdbcType=INTEGER},
      </if>
    </set>
    where `year_month` = #{yearMonth,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.org.escience.log.api.model.General">
    update general
    set visits = #{visits,jdbcType=INTEGER},
      visits_unique = #{visitsUnique,jdbcType=INTEGER},
      pages = #{pages,jdbcType=INTEGER},
      hits = #{hits,jdbcType=INTEGER},
      bandwidth = #{bandwidth,jdbcType=BIGINT},
      pages_nv = #{pagesNv,jdbcType=INTEGER},
      hits_nv = #{hitsNv,jdbcType=INTEGER},
      bandwidth_nv = #{bandwidthNv,jdbcType=BIGINT},
      hosts_known = #{hostsKnown,jdbcType=INTEGER},
      hosts_unknown = #{hostsUnknown,jdbcType=INTEGER}
    where `year_month` = #{yearMonth,jdbcType=VARCHAR}
  </update>
</mapper>